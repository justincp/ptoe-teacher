@using System.Threading;
@inject HttpClient HttpClient
@implements IDisposable

<div class="dialog-container">
    <div class="dialog">
        <div class="dialog-title">
            @if (@counter > 0)
            {
                <h3>Seconds remaining: @counter</h3>
            }
            @if (Quiz.POSITIVE_MODE)
            {
                <h3><font color="blue">Elements mastered: @Quiz.TotalMastered()</font></h3>
            }
            else
            {
                <h3><font color="red">Mistakes: @mistakes   </font></h3>
            }
    
        </div>
        <h1>What is the element name of @Quiz.Question.Symbol?</h1>
        <form class="dialog-body">
            
            <div>
                
                <label>Element name:</label>
                <InputText @ref=itResponse @bind-Value="response" @onkeydown="Enter" hidden="true" />
                <MyInputText @ref="@tb" @bind-Value="response" @onkeydown="Enter" />
                @if (freezeInputs && pictureFile != "")
                {
                    <img src="@pictureFile" width="50" height="50" />
                }

                @if (freezeInputs && !isCorrect)
                {
                    <div>
                        <h3>@Quiz.Question.Name</h3>
                    </div>
                }

            </div>

        </form>

        <div class="dialog-buttons">
            <h2>
                <span class="mr-center">
                    @Quiz.Reinforcment()
                </span>
            </h2>
            @if (!freezeInputs)
            {
                <button class="btn btn-success ml-auto" @onclick="Click">Check answer</button>
            }
            else
            {
                <audio autoplay><source src=@soundFile /></audio>
            }
        </div>


    </div>
</div>

@code {

    MyInputText tb;
    private InputText itResponse; // bogus invisible text box to keep form from disappearing

    private bool freezeInputs = false;

    [Parameter] public ElementQuiz Quiz { get; set; }
    [Parameter] public ElementQuestion Question { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }
    [Parameter] public EventCallback OnKeyDown { get; set; }
    [Parameter] public EventCallback QuizOver { get; set; }

    PeriodicTimer responseTimer;
    PeriodicTimer QuizTimer;

    public string response = "";
    private string soundFile = "";
    private string pictureFile = "";
    private bool isCorrect = false;
    private int counter;
    private int mistakes = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            counter = Quiz.QUIZ_MINUTES * 60;
            QuizTimer = new(TimeSpan.FromSeconds(1));
            RunQuizTimer();
            //await tb.Element.Value.FocusAsync(); // causing an error-don't know why
        }

        await Task.Yield();
    }

    public async Task Click(MouseEventArgs e)
    {
        CheckAnswer();

        await Task.Yield();
    }

    public async Task Enter(KeyboardEventArgs e)
    {
        if (freezeInputs)
            e.Code = "";

        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            Question.Response = response;
            CheckAnswer();
        }
        await Task.Yield();
    }

    private void CheckAnswer()
    {
        freezeInputs = true;
        isCorrect = Quiz.CheckAnswer(response);

        if (isCorrect)
        {
            if (Quiz.POSITIVE_MODE)
            {
                switch (new Random().Next(2))
                {
                    case 0:
                        soundFile = "/sound/mixkit-retro-game-notification-212.wav";
                        break;
                    case 1:
                        soundFile = "/sound/mixkit-small-crowd-ovation-437.wav";
                        break;
                }
                pictureFile = "/img/Checkmark.png";
            }
            else
            {
                soundFile = "";
                pictureFile = "";
                // nothing special
            }

            responseTimer = new(TimeSpan.FromSeconds(3));
        }
        else
        {

            if (Quiz.POSITIVE_MODE)
            {
                // nothing special
                soundFile = "";
                pictureFile = "";
            }
            else
            {
                pictureFile = "/img/OIP.jpg";
                switch (new Random().Next(3))
                {
                    case 0:
                        soundFile = "/sound/mixkit-crowd-laugh-424.wav";
                        break;
                    case 1:
                        soundFile = "/sound/mixkit-arcade-retro-game-over-213.wav";
                        break;
                    case 2:
                        soundFile = "/sound/boo.m4a";
                        break;
                }

            }
            mistakes++;
            responseTimer = new(TimeSpan.FromSeconds(4));
        }

        RunResponseTimer();
    }


    async void RunResponseTimer()
    {
        while (await responseTimer.WaitForNextTickAsync())
        {
            Quiz.NextQuestion();
            Question = Quiz.Question;
            Question.Response = "";
            response = "";
            freezeInputs = false;
            soundFile = "";
            pictureFile = "";
            StateHasChanged();
            //await tb.Element.Value.FocusAsync(); // doesn't work - don't know hy
            break;
        }
        responseTimer.Dispose();
    }

    async void RunQuizTimer()
    {
        while (await QuizTimer.WaitForNextTickAsync())
        {
            if (counter > 0)
            {
                counter -= 1;
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                break;
            }
        }
        QuizTimer.Dispose();
        await QuizOver.InvokeAsync();
    }

    public void Dispose()
    {
        responseTimer?.Dispose();
        QuizTimer?.Dispose();
    }




}